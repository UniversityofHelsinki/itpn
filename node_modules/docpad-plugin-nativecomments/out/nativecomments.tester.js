// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(testers) {
    var MyTester, expect, pathUtil, rimraf, superAgent, _ref;
    expect = require('chai').expect;
    superAgent = require('superagent');
    rimraf = require('rimraf');
    pathUtil = require('path');
    return MyTester = (function(_super) {
      __extends(MyTester, _super);

      function MyTester() {
        this.testCreate = __bind(this.testCreate, this);
        _ref = MyTester.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      MyTester.prototype.docpadConfig = {
        port: 9779
      };

      MyTester.prototype.testCreate = function() {
        var tester, testerConfig;
        tester = this;
        testerConfig = tester.getConfig();
        this.test("clean nativecomments", function(done) {
          return rimraf(pathUtil.join(testerConfig.testPath, 'src', 'documents', 'comments'), function(err) {
            return done();
          });
        });
        MyTester.__super__.testCreate.apply(this, arguments);
        return this;
      };

      MyTester.prototype.testGenerate = testers.RendererTester.prototype.testGenerate;

      MyTester.prototype.testServer = function(next) {
        var generated, tester;
        tester = this;
        generated = false;
        MyTester.__super__.testServer.apply(this, arguments);
        /*
        			# Watch
        			@test 'watch', (done) ->
        				tester.docpad.action 'watch', (err) ->
        					return done(err)  if err
        					# Ensure enough time for watching to complete
        					setTimeout(
        						-> done()
        						5*1000
        					)
        */

        return this.suite('nativecomments', function(suite, test) {
          var baseUrl, docpad, docpadConfig, now, nowString, nowTime, plugin, pluginConfig, postUrl, testerConfig;
          testerConfig = tester.getConfig();
          docpad = tester.docpad;
          docpadConfig = docpad.getConfig();
          plugin = tester.getPlugin();
          pluginConfig = plugin.getConfig();
          baseUrl = "http://localhost:" + docpadConfig.port;
          postUrl = "" + baseUrl + "/comment";
          now = new Date();
          nowTime = now.getTime();
          nowString = now.toISOString();
          test("post a new comment to " + postUrl, function(done) {
            return superAgent.post(postUrl).type('json').set('Accept', 'application/json').send({
              body: 'the comment body',
              title: 'the comment title',
              author: 'the comment author',
              "for": 'index',
              date: nowTime,
              redirect: false
            }).timeout(30 * 1000).end(function(err, res) {
              var actual, expected, _ref1, _ref2;
              if (err) {
                return done(err);
              }
              generated = true;
              if ((_ref1 = res.body) != null ? (_ref2 = _ref1.meta) != null ? _ref2.fullPath : void 0 : void 0) {
                res.body.meta.fullPath = res.body.meta.fullPath.replace(/.+src\/documents/, 'trimmed');
              }
              actual = res.body;
              expected = {
                data: 'the comment body',
                meta: {
                  title: 'the comment title',
                  "for": 'index',
                  author: 'the comment author',
                  date: nowString,
                  mtime: nowString,
                  fullPath: 'trimmed/comments/' + nowTime + '.html.md'
                }
              };
              expect(actual).to.deep.equal(expected);
              return done();
            });
          });
          return setTimeout(function() {
            return docpad.action('generate');
          }, 5 * 1000);
        });
      };

      return MyTester;

    })(testers.ServerTester);
  };

}).call(this);
